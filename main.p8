pico-8 cartridge // http://www.pico-8.com
version 36
__lua__
-- main
g = {} -- games state
actors = {}
chars = {}
ens = {}
T = 0
buttbuff=-1
debug = true
debug = false

function _init()
  T = 0
  pc = make_pc()
  m = make_map()
  for i=1,4 do
    make_en()
  end
  -- mmenu_ini()
  -- exp_ini()
  -- init_ini()
  cmbt_ini()

  -- Filter actors for only 
  -- combat
  for a in all(actors) do
    if (is_char(a)) add(chars, a)
  end

end

function _update()
  T+=1
  m:up()
  g.upd()
end

function _draw()
  cls()
  m:dr()
  g.drw()
end

-- make an actor
-- add it to global collection
-- i,j means center of actor
-- in map coordinates
function make_actor(sp,i,j)
  local a = {}
  a.sp=sp
  a.i=i or 0
  a.j=j or 1
  a.ox=0
  a.oy=0
  a.sox=0
  a.soy=0
  a.frame=0
  a.frames=1
  a.mov=nil
  a.delay=2
  a.t=0
  a.ini=0
  a.up=nil
  a.dr=function(s) 
    spr(a.sp,a.i*8,a.j*8) 
  end
  a.reset=function(s) 
    s.frame=0
    s.ox=0
    s.oy=0
  end
  add(actors,a)
  return a
end

function make_pc()
  local a = make_actor(34,7,7)
  a.name="knight"
  a.frames=2
  a.dir=0
  a.mvmt=6
  a.ini=23
  a.maxhp=40
  a.hp=a.maxhp
  a.tail={}
  a.bktrk=0
  a.mv=move_pc
  a.up=upd_pturn
  a.dr=draw_pc
  a.at=attack_pc
  a.et=function(s)
      a.bktrk=0
      a.tail={}
      end
  a.type='pc'
  a.opts=
    {'move',
     'melee attack',
     'ranged attack',
     'end turn'}
  return a
end

function make_map()
  local m = {}
  m.i = 0
  m.j = 0
  m.ox = 0
  m.oy = 0
  m.w = 64
  m.h = 32
  m.up = 
    function(s)
      local p = actors[1]
      local newi = (p.i\16)*16
      local newj = (p.j\16)*16

      -- Scroll map instead of jumping
      if newi - m.i > 0 then
        m.ox = 128
      elseif newi - m.i < 0 then
        m.ox = -128
      end
      if newj - m.j > 0 then
        m.oy = 128
      elseif newj - m.j < 0 then
        m.oy = -128
      end
      if m.ox > 0 then
        m.ox-=8
      elseif m.ox < 0 then
        m.ox+=8
      end
      if m.oy > 0 then
        m.oy-=8
      elseif m.oy < 0 then
        m.oy+=8
      end
      -- Update values
      m.i = newi
      m.j = newj
    end
  m.dr = 
    function(s)
      map(0,0,0,0,s.w,s.h)
      camera(m.i*8-m.ox,m.j*8-m.oy)
    end
  return m
end

function make_en()
  local s = 16
  local a = make_actor(30,flr(rnd(s)),flr(rnd(s)))
  a.name='enemy'
  a.maxhp=80
  a.hp=a.maxhp
  a.up=upd_en
  a.dr=draw_en
  a.type='en'
  return a
end

function upd_en()
--placeholder
end

function draw_en(en,x,y)
  x = x or en.i*8
  y = y or en.j*8
  palt(10,true)
  palt(0,false)
  spr(en.sp,x,y)
  pal()
end

function can_move(p,di,dj)
  local newi = p.i+di
  local newj = p.j+dj
  -- Is tile a "wall"?
  local test = not is_tile(0,newi,newj)
  -- Are we trying to move out
  -- of bound?
  test = test and (newi >= 0 and newi < m.w)
  test = test and (newj >= 0 and newj < m.h)
  -- Do we have movement left?
  -- Only relevant for combat
  test = test and (p.mvmt - #p.tail) > 0
  -- Edge case, need to check if
  -- backtracking our path
  if not test then
    for p in all(p.tail) do
      test = p[1] == newi
      test = test and (p[2] == newj)
      if (test) break
    end
  end

  return test
end

function move_pc(p,di,dj)
  -- check for solid and we also
  -- wait for the map to stop
  -- animating
  if can_move(p,di,dj) and
      m.ox == 0 and
      m.oy == 0 then
    -- we only track the tail
    -- during combat also
    -- combat has sub-states so
    -- we check for draw to see
    -- if we are in combat
    if (g.drw == cmbt_drw) then
      track_tail(p,di,dj)
    end
    pcurr.i+=di
    pcurr.j+=dj
    pcurr.sox,pcurr.soy = -di*8,-dj*8
    pcurr.mov = mov_walk
    pcurr.ox,pcurr.oy=pcurr.sox,pcurr.soy
  else -- bump
    pcurr.sox = di*6
    pcurr.soy = dj*6
    pcurr.ox,pcurr.oy=0,0
    pcurr.mov = mov_bump
  end
  -- TODO: come back and clean this
  -- maybe something with bitfield?
  -- adjust sprite dir
  if (di==-1) pcurr.dir=0
  if (di==1)  pcurr.dir=1
  if (dj==1)  pcurr.dir=2
  if (dj==-1) pcurr.dir=3

  -- animate
  g.upd=upd_pturn
end

function upd_pturn()
  -- check for button presses while animating
  if (buttbuff<0) buttbuff=getbutt()
  -- animate
  pcurr.t=min(pcurr.t+0.125,1)
  pcurr:mov()
  if (pcurr.t>=1) then
    g.upd=move_upd
    pcurr.t=0
  end
end

function mov_walk(self)
  local n = 4 -- anim cycles
  self.ox=self.sox*(1-self.t)
  self.oy=self.soy*(1-self.t)
  self.frame=(self.t*n)%self.frames
end

function mov_bump(self)
 local tme = self.t
  local n = 4 -- anim cycles
  if (tme>0.5) tme=1-tme
  self.ox=self.sox*tme
  self.oy=self.soy*tme
  self.frame=(self.t*n)%self.frames
end


function track_tail(c,di,dj)
  local newx,newy=c.i+di,c.j+dj
  local nw_tail = {}
  for p in all(c.tail) do
    if newx==p[1] and
       newy==p[2] and
       c.bktrk == 0 then
      break
    end
    add(nw_tail,p)
  end

  if #nw_tail >= #c.tail then
    add(nw_tail, {c.i, c.j})
  end

  c.tail = nw_tail

end

-- Draws pc to screen
-- If x,y,f are provided then
-- drawn image will be static
function draw_pc(p,x,y,f)
  x = x or (p.i*8+p.ox)
  y = y or (p.j*8+p.oy)
  f = f or p.frame
  -- TODO: God this is ugly
  -- Please come clean this up
  -- There might be something
  -- better to do with dir and
  -- the sprite order
  local d = p.dir
  local q = 0
  if (d==2) q+=2
  if (d==3) q+=4
  if debug then
    ?"dir: "..d..", ox: "..p.ox..", oy: "..p.oy,0,0,7
  end
  if debug then
    palt(10,true) -- remove yellow
    palt(0,false) -- allow black
    pal(6,3)
    pal(7,11)
    spr(p.sp+q+f,p.i*8,p.j*8,1,1,d==0)
    pal()
  end
  palt(10,true)
  palt(0,false)
  spr(p.sp+q+f,x,y,1,1,d==0)
  pal()
  -- -- HUD
  -- -- HP
  -- rect(1,1,p.maxhp,6,0)
  -- rectfill(2,2,p.hp-1,5,8)
end

-->8
-- main menu

function mmenu_ini()
 g.upd = mmenu_upd
 g.drw = mmenu_drw
end

function mmenu_upd()
 if btn(🅾️) or btn(❎) then
  ctscn_ini()
 end
end

function mmenu_drw()
 cls()
 print("press 🅾️/❎ to start")
end
-->8
-- cutscene/dialogue
ctscn = {start=0}

function ctscn_ini()
 ctscn.start = time()
 g.upd = ctscn_upd
 g.drw = ctscn_drw
end

function ctscn_upd()
 if time()-ctscn.start < 1 then
  return
 end
 if time()-ctscn.start > 8 or
    btn(❎) or btn(🅾️) then
  cmbt_ini()
 end
end

function ctscn_drw()
 cls()
 local t = time() - ctscn.start
 local s = "hello"
 if t > 1 then
  s = s..sub("...",1,t-1)
 end
 if t > 5 then
  s = s.." this is the end of the\nscene"
 end
 print(s)
end
-->8
-- non-combat exploration
function exp_ini()
  g.upd = exp_upd
  g.drw = exp_drw
end

function exp_upd()
  if (btnp()) pc:mv(getlr(),getud())

  foreach(actors, function(s) s:up() end)

  -- Dummy way to enter combat
  if pc.i==1 and pc.j==1 and
     pc.ox==0 and pc.oy==0 then
    init_ini()
  end
end

function exp_drw()
  foreach(actors, function(s) s:dr() end)
  -- Portal to enter combat
  rect(7,8,15,16,9)
end

-->8
-- combat
function cmbt_ini()
  g.upd = cmbt_upd
  g.drw = cmbt_drw
  pturn = 1
  cmenu={}
  cmenu.p=false
  cmenu.s=0
  cmenu.ats=1
  cmenu.winds = {}
  add(cmenu.winds,make_wind(0,110,64,16,6,5))
  add(cmenu.winds,make_wind(64,110,64,16,7,0))
  cmenu.drawers= {}
  add(cmenu.drawers,make_wind(64+2,110,12,10,7,0))
  if (debug) pc.ini=69
  -- order by initiative
  order_initiative(chars)
end

function make_wind(x,y,w,h,ic,bc)
  local d = {}
  d.x,d.y=x,y
  d.sx,d.sy=x,y
  d.w,d.h=w,h
  d.ic,d.bc=ic,bc
  d.t = 0
  d.dr=function(s,str)
      str = str or ""
      text_box(str,s.x,s.y+2,s.w,s.h,s.ic,s.bc)
    end
  return d
end

function cmbt_upd()
  pcurr = chars[pturn]
  cmenu.str="what will "..pcurr.name.." do?"
  cmenu.p=false

  -- get button input
  if(buttbuff<0) buttbuff=getbutt()

-- menu selection
  -- no button input
  if (buttbuff<0) return

  -- scroll through combat opts
  if buttbuff>=0 and buttbuff<4 then
    cmenu.s+=dirx[buttbuff+1]
    cmenu.s=cmenu.s%#pcurr.opts
  end

  -- enter/exit selection mode
  if buttbuff==5 then
    cmenu.p=true
    if (cmenu.s == 0) g.upd = move_upd
    -- if (self.s == 1 or self.s==2) g.up = att_upd
    -- if (self.s==3) g.upd = end_turn_pc
  end
  buttbuff=-1
end

function cmbt_drw()
  -- ?mybutt,0,0
-- actors
  pc_path(pcurr)
  foreach(actors, function(s) s:dr() end)

-- highlight enemies within range
  -- if cmenu.p and 
  --   (cmenu.s==1 or
  --    cmenu.s==2) then
  --     if (debug) ?#ens,0,0,9
  --     for i,e in ipairs(ens) do
  --       ants_box(e.i*8-1,e.j*8-1,9,9,7,(cmenu.ats+1)==i)
  --     end
  -- end

-- draw roster
  -- draw_box(0,0,22,#chars*10+1)
  -- for i,c in ipairs(chars) do
  --   c:dr(3,1+(i-1)*10,0)
  --   local dx = 12
  --   if (c.ini < 10) dx+=2
  --   ?c.ini,dx,3+(i-1)*10,6
  -- end

-- draw menu
  -- TODO: eliminate this hard coding
  -- bring it into cmenu
  local x,y=0,112
  local w,h=64,128-y
  cmenu.winds[1]:dr(cmenu.str)

  for i,d in ipairs(cmenu.drawers) do
    if(cmenu.s+1==i) then
      d.t=min(d.t+.1,1)
    else
      d.t=max(d.t-.1,0)
    end
    d.y=lerp(d.sy,d.sy-d.h+2,d.t)
    d:dr(5*(pcurr.mvmt-#pcurr.tail))
  end

  -- action menu bgnd
  cmenu.winds[2]:dr()
  -- action selection box
  local c = 9
  if (cmenu.p) c = 2
  draw_box(x+w+2+cmenu.s*16,y+2,12,12,7,c)

  -- sprites for actions
  for i=0,3 do
    spr(204+i,x+w+4+i*16,y+4)
  end

end

function move_upd()
  cmenu.str=pcurr.name.." is on the move!"
  if (buttbuff<0) buttbuff=getbutt()

  if buttbuff>=0 and buttbuff<4 then
    pcurr:mv(dirx[buttbuff+1],diry[buttbuff+1])
  end

  if (buttbuff==5) then
    g.upd=cmbt_upd
  end

  buttbuff=-1
end


function pc_path(pc)  
 if #pc.tail == 0 then
  return
 end
 for n=pc.bktrk+1,#pc.tail do
  local x0 = pc.tail[n][1]*8
  local y0 = pc.tail[n][2]*8
  rect(x0,y0,x0+7,y0+7,8)
 end
end

-- rolling initiative
function init_ini()
  g.drw = init_drw
  g.upd = init_upd
  roll = false
  rtime = 1
  rval = 20
  p = 0
  dflash=0
  foreach(actors, function(s) s:reset() end)
end

function init_drw()
  cls()
  pcenter("press ❎ to roll",40)
  -- draw roster
  for i,c in ipairs(chars) do
    c:dr(64+(i-1)*10,64)
    local dx = 0
    if (c.ini < 10) dx=2
    ?c.ini,64+(i-1)*10+dx,73,8
  end
  -- draw d20
  if rval==20 and dflash>0 then
    pal(7,dflash)
    dflash-=1
  end
  spr(192,16,56,2,4)
  spr(192,31,56,2,4,true)
  pal()
  -- show number on d20
  local rx = 28
  if (rval<10) rx+=2
  local rcolor = 10
  if (not roll) rcolor=8
  ?rval,rx,73,rcolor
  if (roll and debug) ?"ROLLING",0,0
end

function init_upd()
  if btnp(❎) then
    rtime=1
    roll=true
    p+=1
    g.upd = rollad20
  end
  -- +1 here helps us not change
  -- screens immediately once
  -- we roll the last char
  if (p==#chars+1) cmbt_ini()
end

-- Exponentially slow dice rolling
function rollad20()
  if (T%rtime==0) rval = flr(rnd(20)) + 1

  if (T%10==0) rtime*=2 

  if (rtime > 127) then
    g.upd = init_upd
    if (rval == 20) dflash=30
    chars[p].ini = rval
    roll = false
  end
end

-->8
-- credits

-->8
--tools
function easeinquad(t)
  return t*t
end
function easeoutquad(t)
  t-=1
  return 1-t*t
end
function easeinoutquad(t)
    if(t<.5) then
        return t*t*2
    else
        t-=1
        return 1-t*t*2
    end
end 
function getbutt()
  for i=0,5 do
    if (btnp(i)) then
      return i
    end
  end
  return -1
end

function lerp(a,b,t)
  return a*(1-t) + b*t
end

function in_range(x0,y0,x1,y1,r)
  return (abs(x0-x1)<=r) and (abs(y0-y1)<=r)
end
  
function find_enemies(r)
  r = r or 1
  for c in all(chars) do
    if c.type=='en' then
      if (in_range(pc.i,pc.j,c.i,c.j,r)) add(ens,c)
    end
  end
end

function draw_box(x,y,w,h,ic,bc)
  ic = ic or 5
  bc = bc or 0
  rect(x, y+1,(x+w)-1, y+h-2, bc)
  rect(x+1,y,(x+w)-2,y+h-1,bc)
  rectfill(x+1,y+2,(x+w)-2,(y+h)-3,ic)
  rectfill(x+2,y+1,(x+w)-3,(y+h)-2,ic)
end

function text_box(s,x,y,w,h,ic,bc)
  s = s or "TEST"
  x = x or 32
  y = y or 32
  w = w or 64
  h = h or 64
  ic = ic or 5
  bc = bc or 0
  draw_box(x,y,w,h,ic,bc)
  fit_string(s,x+2,y+2,w-2)
end

function ants_box(x,y,w,h,c,an)
  c = c or 0x8 -- red
  local bf = 0x936c.936c
  if an then
    bf = bf>><(t()<<5&12) | 0x0.8
  end
  fillp(bf)
  rect(x,y,x+w,y+h,c)
  fillp()
end

-- Fits a string s into a
-- width w at position (x,y)
-- split by delim. d
function fit_string(s,x,y,w,d)
  d = d or " "
  local strs = split(s,d,false)
  local curr_width = 0
  local line = 0
  for str in all(strs) do
    if (curr_width+4*#str >= w) then
      line+=1
      curr_width = 0
    end
    ?str,x+curr_width,y+6*line,0
    curr_width+=5*#str
  end
end

function rollad(num)
  return flr(rnd(num))+1
end

function order_initiative(a)
  for i=1,#a do
    local j = i
    while (j > 1) and (a[j-1].ini < a[j].ini) do
      a[j],a[j-1] = a[j-1],a[j]
      j = j - 1
    end
  end
end

-- print string s to approx. 
-- center of screen with y
-- height and color c
function pcenter(s,y,c)
  y = y or 64
  c = c or 7
  ?s,64-4*(#s\2),y,c
end

--[[ 
  getlr and getud are used to 
  simplify the button tracking
  process for dpad input
]]
-- Get left/right
function getlr()
  return band(btnp(),2)/2-band(btnp(),1)
end

-- Get up/down
function getud()
  return band(btnp(),8)/8-band(btnp(),4)/4
end

function is_tile(tile_type,i,j)
  return fget(mget(i,j),tile_type)
end

function is_char(a)
  return a.type=='pc' or 
         a.type=='en'
end

function swap_tile(i,j)
  mset(i,j,mget(i,j)+1)
end

function interact(e1,e2,i,j)
  if (e1.type=="pc" and e2.type=="en")
      and (i==e2.i and j==e2.j) then
    e1.hp-=5
    return true
  end

  return false
end

dirx={-1,1,0,0}
diry={0,0,-1,1}

__gfx__
000000000000000088e8800088e8800008e8880008e8880c00888e80c0888e800000000000000000000000000000000008e888000088000008e8880000880000
000000000000000008ee880c08ee880008ee880c08ee8804c088ee804088ee800000000000000000000000000000000008ee880c08e8880008ee880c08e88800
007007000000000008f0f00408f0f0c00f0f0f040f0f0f0440f888f040f888f0000000000000000000000000000000000f0f0f0408ee88c00f0f0f0408ee88c0
00077000000000000effff040effff40ffffff040fffffff40ff88fffff88ff0000000000000000000000000000000000fffff040f0f0f400fffff040f0f0f40
00077000000000008888888f08888840088888fff8888800ff8888800088888f00000000000000000000000000000000888888ffffffff40888888ffffffff40
0070070000000000f8ee88000fee88f008ee880008ee88000088ee800088ee8000000000000000000000000000000000f8ee880008ee88f0f8ee880008ee88f0
00000000000000000888880008888800088888808888880008888880008888880000000000000000000000000000000008888800088888000888880008888800
00000000000000008888880088888880888800000000888000008888088800000000000000000000000000000000000088888880888888808888888088888880
000000000000000033bb30e0033b300003bb300f03bb3000f0033b3000033b30000000000000000000000000000000000000000000000000a51155a6a511556a
000000000000000003bbb30f33bbb3f003bbb30f03bbb30ff033bb30f033bb30000000000000000000000000000000000000000000000000a51050a6a510506a
00000000000000000340400f034040f00404040f0404040ff0433340f0433340000000000000000000000000000000000000000000000000a55050a6a550506a
00000000000000000144440f014444f0044444340444440f43443340f0433440000000000000000000000000000000000000000000000000a55555a6a555556a
000000000000000033bbb33403bbb34033bbb30e33bbb334e03bbb33433bbb3300000000000000000000000000000000000000000000000044411555a444155a
00000000000000004555650e045565e04555650e0555650ee0565554e0565550000000000000000000000000000000000000000000000000404552a6a404526a
00000000000000000333330e033333e00323330e0333230ee0333230e0323330000000000000000000000000000000000000000000000000444555aaa44455aa
0000000000000000002020e002000200000020000020000e00020000e0000200000000000000000000000000000000000000000000000000aa2a2aaaa2aaa2aa
0000000000000000a67766a5a677665aa67766a5a67766a55a66776a5a66776a0000000000000000000000000000000000000000000000000000000000000000
0000000000000000a67060a5a670605aa60606a5a60606a55a66666a5a66666a0000000000000000000000000000000000000000000000000000000000000000
0000000000000000a66060a5a660605aa60606a5a60606a55a66666a5a66666a0000000000000000000000000000000000000000000000000000000000000000
0000000000000000a66666a5a666665a555666a5a66666665a6666656666666a0000000000000000000000000000000000000000000000000000000000000000
000000000000000055577666a555766a51567666555676a5666776655a6776650000000000000000000000000000000000000000000000000000000000000000
000000000000000051566da5a5156d5a555dd6a5515dd6aa5a6d6665aa6d66650000000000000000000000000000000000000000000000000000000000000000
0000000000000000555666aaa55566aaaa66d6aa555666aaaa6666aaaa6666550000000000000000000000000000000000000000000000000000000000000000
0000000000000000aadadaaaadaaadaaaadaaaaaaaaadaaaaaaaadaaaaadaaaa0000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
44444440444944444444444044444440000000000000000000000000000000000000000000000000000000000000000044444444444904444444444444490444
49994440999444444999444049994440000000000000000000000000000000000000000000000000000000000000000049994449999404494999444999940449
44499440444449944449944044499440000000000000000000000000000000000000000000000000000000000000000044499444444409994449944444440999
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
44444444444444404444444444444444000000000000000000000000000000000000000000000000000000000000000044440444444444444444044444444444
99944444499944409994444499944444000000000000000000000000000000000000000000000000000000000000000099940449499944499994044949994449
44494994444444404449499444494994000000000000000000000000000000000000000000000000000000000000000044490999444444444449099944444444
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
44444440444944444444444044444440000000000000000000000000000000000000000000000000000000000000000044444444444904444444444444490444
44494440999444444449444044494440000000000000000000000000000000000000000000000000000000000000000044494449999404494449444999940449
44994440444449944499444044994440000000000000000000000000000000000000000000000000000000000000000044994444444409994499444444440999
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
99944444444994409994444499944444000000000000000000000000000000000000000000000000000000000000000099944444444994409994444444499440
44949994444444404494999444949994000000000000000000000000000000000000000000000000000000000000000044949999444444404494999944444440
44449444444444404444944444449444000000000000000000000000000000000000000000000000000000000000000044449444444444404444944444444440
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
44444440444944444444444044444440000000000000000000000000000000000000000000000000000000000000000044444444444904444444444444490444
49994440999444444999444049994440000000000000000000000000000000000000000000000000000000000000000049994449999404494999444999940449
44499440444449944449944044499440000000000000000000000000000000000000000000000000000000000000000044499444444409994449944444440999
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
44444444444444404444444444444444000000000000000000000000000000000000000000000000000000000000000044440444444444444444044444444444
99944444499944409994444499944444000000000000000000000000000000000000000000000000000000000000000099940449499944499994044949994449
44494994444444404449499444494994000000000000000000000000000000000000000000000000000000000000000044490999444444444449099944444444
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
44444440444944444444444044444440000000000000000000000000000000000000000000000000000000000000000044444444444904444444444444490444
44494440999444444449444044494440000000000000000000000000000000000000000000000000000000000000000044494449999404494449444999940449
44994440444449944499444044994440000000000000000000000000000000000000000000000000000000000000000044994444444409994499444444440999
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
99944444444994409994444499944444000000000000000000000000000000000000000000000000000000000000000099944444444994409994444444499440
44949994444444404494999444949994000000000000000000000000000000000000000000000000000000000000000044949999444444404494999944444440
44449444444444404444944444449444000000000000000000000000000000000000000000000000000000000000000044449444444444404444944444444440
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0000000000000007000000000000000000000000000000000000000000000000000000000000000000000000000006660000af000000006600444440820000e8
0000000000000777000000000000000000000000000000000000000000000000000000000000000000000000000000460000ff000000066600044400e8200e82
0000000000077707000000000000000000000000000000000000000000000000000000000000000000000000000004060033300000006660000999900e82e820
00000000077700070000000000000000000000000000000000000000000000000000000000000000000000000000400003033330000666000444444900e88200
00000000770000070000000000000000000000000000000000000000000000000000000000000000000000000004000000033000555560004444444900e88200
0000007770000007000000000000000000000000000000000000000000000000000000000000000000000000a9a000000040040001550000444444440e82e820
000077700000000700000000000000000000000000000000000000000000000000000000000000000000000009900000040004000115000044444444e8200e82
000770000000000700000000000000000000000000000000000000000000000000000000000000000000000040a00000000004005005000004444440820000e8
00777777777777770000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0077000000000077000000000000000000000000000000000000000000000000000000000000000000000000000060000000b0000000b0000000000000000000
0077000000000070000000000000000000000000000000000000000000000000000000000000000000000000000066000000bb000000bb000000000000000000
0077000000000770000000000000000000000000000000000000000000000000000000000000000000000000006606600099bbb00009bbb00000000000000000
00777000000007000000000000000000000000000000000000000000000000000000000000000000000000000060600000999000000990000000000000000000
00707000000077000000000000000000000000000000000000000000000000000000000000000000000000000600600009994000000000000000000000000000
00707000000770000000000000000000000000000000000000000000000000000000000000000000000000000606000009940000000000000000000000000000
00707000000700000000000000000000000000000000000000000000000000000000000000000000000000006660000099400000000000000000000000000000
007077000077000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000c000c0000c000c000000000
0070070000700000000000000000000000000000000000000000000000000000000000000000000000000000000000000c000c00cec0cec00cec0cec00c000c0
007007000770000000000000000000000000000000000000000000000000000000000000000000000000000000000000cec0cec0cec0cec00cec0cec0cec0cec
007007700700000000000000000000000000000000000000000000000000000000000000000000000000000000000000cec0cec0ccccccc00ccccccc0cec0cec
007000707700000000000000000000000000000000000000000000000000000000000000000000000000000000000000ccccccc0c1ccc1c00c1ccc1c0ccccccc
007000707000000000000000000000000000000000000000000000000000000000000000000000000000000000000000c1ccc1c0ccccccc00ccccccc0c1ccc1c
007000777000000000000000000000000000000000000000000000000000000000000000000000000000000000000000ccccccc00ccecc0000ccecc00ccccccc
0077777777777777000000000000000000000000000000000000000000000000000000000000000000000000000000000ccecc00000000000000000000ccecc0
00077007700000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0000777077000000000000000000000000000000000000000000000000000000000000000000000000000000000000000700070004000400050005000c000c00
0000007777770000000000000000000000000000000000000000000000000000000000000000000000000000000000007e707e704e404e405e505e50cec0cec0
0000000077777000000000000000000000000000000000000000000000000000000000000000000000000000000000007e707e704e404e405e505e50cec0cec0
000000000077770000000000000000000000000000000000000000000000000000000000000000000000000000000000777777704444444055555550ccccccc0
000000000007777000000000000000000000000000000000000000000000000000000000000000000000000000000000787778704044404050555050c0ccc0c0
000000000000077700000000000000000000000000000000000000000000000000000000000000000000000000000000777777704444444055555550ccccccc0
000000000000000700000000000000000000000000000000000000000000000000000000000000000000000000000000077e7700044e4400055e55000ccecc00
__gff__
0000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000101000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000002020000000000000000000000000000000101010100000000000000000000000001010101
__map__
4041424340414243404142434041424300000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
5051525350515253505152535051525300000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
6061626360616263606162636061626300000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
7071727370717273707172737071727300000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
4041424340414243404142434041424300000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
5051525350515253505152535051525300000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
6061626360616263606162636061626300000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
7071727370717273707172737071727300000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
4041424340414243404142434041424300000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
5051525350515253505152535051525300000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
6061626360616263606162636061626300000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
7071727370717273707172737071727300000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
4041424340414243404142434041424300000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
5051525350515253505152535051525300000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
6061626360616263606162636061626300000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
7071727370717273707172737071727300000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
